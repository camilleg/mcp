// Pseudocode spec for the sound input class.

// Blocking interface instead of cumbersome callbacks for now.
// When reading, use the stream parameters to resample and channel-remap on the fly.

// Constructor
input_t(foo stream, bool in_or_out, int ch, double sr, enum frm)
{
  switch (stream) {
  case "file"
  case "url"
    use ffmpeg
  case "socket"
    use homebrew code?
  case "adc"
  case "dac"
    Use portaudio
  }
}

// Seeking
seek( long s); // move to sample frame s
seek( double t); // move to second t

// Writing
write( array<T> &x, long offset, int channel_mask); // sample frames
write( array<T> &x, double offset, int channel_mask); // seconds
write_add( array<T> &x, long offset, int channel_mask); // sample frames
write_add( array<T> &x, double offset, int channel_mask); // seconds


// Mark's written Segment and Tree, still need to write Rule.
// A chart parser that builds upward from abstract class Segment
//   { int startTime, int endTime, float logLikelihood, int index of nonterminal/senone/word index }.
// Mark changes class Segment to read aufeat.h's representation for AV feature vectors.

// Mark's code could do:
vector<map<int,Segment>> chartByStartTime, chartByEndtime;
Tree<SegmentByLl> bestfirst;
GMM gmm[N];
Rule rule [R];
while (in) {
  const double t = in.time();
  x = in.read();
  y = feature(x);
  for(n=0; n<N; ++n) {
    ll = gmm[n].ll(y);
    const Segment s = Segment(t-1, t, ll, n);
    bestfirst.insert(&((SegmentByLl)s));
    chartByStartTime[t-1][n] = s;
    chartByEndTime  [t  ][n] = s;
    const double beam = bestfirst.first().value() - beamwidth;
    while ((b=bestfirst.firstpop()).value() > beam) {
      std::set rules = canFireOn(rule, R, b);
      if (!rules.empty()) {
        foreach r in rules {
	  bestfirst.insert(r);
	  chartByStartTime[something] = r;
	  chartByEndTime  [something] = r;
	}
      }
    }
  }
}
